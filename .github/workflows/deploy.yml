# .github/workflows/deploy.yml

name: Deploy React App to S3 (Using AWS Official Actions) # 워크플로우 이름 (식별용)

on:
  push:
    branches:
      - develop # 지정한 브랜치에 코드가 푸시될 때 이 워크플로우를 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 이 작업이 실행될 가상 환경 (Ubuntu 최신 버전)

    steps:
      - name: Checkout repository # 1. GitHub 저장소 코드 체크아웃
        uses: actions/checkout@v4 # GitHub Actions 기본 액션

      - name: Set up Node.js # 2. Node.js 환경 설정
        uses: actions/setup-node@v4 # GitHub Actions Node.js 설정 액션
        with:
          node-version: '20' # 프로젝트에 필요한 Node.js 버전 지정

      - name: Install Dependencies # 3. React 프로젝트 의존성 설치
        run: npm install --legacy-peer-deps

      - name: Build React App # 4. React 프로젝트 빌드
        run: CI=false npm run build

      - name: Configure AWS credentials # 5. AWS 자격 증명 설정 (AWS 공식 액션)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secret에서 AWS Access Key ID 가져오기
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secret에서 AWS Secret Access Key 가져오기
          aws-region: ${{ secrets.AWS_REGION }} # GitHub Secret에서 AWS 리전 가져오기 (예: ap-northeast-2)

      - name: Deploy to AWS S3 # 6. S3 버킷에 빌드된 파일 배포 (AWS CLI 직접 사용)
        run: |
          # 'dist' 폴더의 내용을 S3 버킷의 루트로 동기화합니다.
          # S3_BUCKET Secret에 저장된 버킷 이름을 사용합니다.
          # --delete 옵션은 S3 버킷에만 있고 로컬 'dist'에 없는 파일을 삭제합니다.
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET }} --delete
          # 만약 'npm run build' 결과물이 'build' 폴더에 생성된다면, './dist'를 './build'로 변경해야 함.
